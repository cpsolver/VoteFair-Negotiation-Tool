VoteFair-Negotiation-Tool


SOFTWARE

The file named "negotiation_tool.cpp" within this folder contains all the code needed to calculate results for VoteFair Negotiation Ranking.  The RUNNING secion below explains how to run this software.


DESCRIPTION

This software negotiation tool can be used to negotiate fair outcomes for real-life situations such as:

    * parliament or legislature negotiating laws, rules, taxes
    * parliament choosing cabinet ministers
    * legislative committee members writing a bill
    * city council members designing a legal reform
    * political party writing party platform
    * labor union member negotiations
    * management versus labor union negotating a new contract
    * board of directors resolving conflicts
    * non-profit organization members negotating an agreement
    * co-op members resolving differences
    * consultant-client contract negotiation
    * buyer-seller bargaining
    * divorce settlement
    * electing multiple legislators from each district
    * liquid democracy
 

Here are characteristics about how it can be used:

* It can handle both friendly and hostile situations.

* It can handle dozens of participants, it can handle just two people, or it could be used among all members of Congress.

* It can handle hundreds of proposals (or more).

* Additional software must interact with the participants to collect proposals, share proposals, collect rankings for the proposals, and share the calculated list of "accepted" proposals.

* Spreadsheets can be used to enter the rankings, but a well-designed web app would be much easier to use.


Here's how the proposals and rankings work:

* Each participant submits proposals.  Each proposal is short, just a single sentence or single paragraph.

* When each new proposal appears, it is automatically ranked at zero (0), which indicates a neutral ranking, neither liked nor disliked.

* Either directly or indirectly, each participant gives a positive ranking number of 1 to 100 for each proposal they like, and the participant gives a negative ranking number of minus 1 (-1) down to minus 100 (-100) for each proposal they dislike.

* Multiple proposals can be ranked at the same ranking number.

* Gaps between the ranking numbers, or a lack of gaps between rankings, do not affect the results.  This characteristic occurs because each ranking number is only compared to other ranking numbers from the same participant, and the numbers only determine the sequence in which the participant ranks the proposals.

* The participant can use any software that converts simpler categories such as "strong like," "medium like," and "weak like," into any positive numbers (such as 60, 40, and 20) without concern about what numbers are chosen by other participants.  Similarly, "strong dislike," "medium dislike," and "weak dislike" can be converted into unrelated negative numbers (such as -90, -60, and -30).  All that matters is whether each proposal's ranking number is larger or smaller than a different proposal's ranking number -- from the same participant.

* Some participants may prefer to think of assigning rating numbers rather than ranking numbers.  This approach works, but the numbers are only used to determine rankings.  Specifically the numbers are only used to determine the sequence in which the participant ranks the proposals.

* Pairwise counting, which is described below in the ALGORITHM section, is used in the calculations.

* The use of pairwise counting defeats any attempts to change the results by limiting the use of positive ranking numbers, or by heavily using negative ranking numbers.


Here's how the negotiation process works:

* Each time the negotiation tool software runs, it identifies the optimum combination of "accepted" proposals that are most strongly appreciated by the most participants.  This calculation can be done automatically every minute or every hour, or it can be done manually once a day.

* Participants view the updated list of "accepted" proposals and change their rankings of the accepted proposals.  Also they may need to change the rankings of the proposals they hope will become accepted proposals.

* If the suggested combination of proposals includes proposals that are incompatible with each other, an administrator updates the information about which proposals are incompatible with specified other proposals.  Then running the software again eliminates the incompatible proposals.

* If some participants distrust an administrator to correctly identify which proposals are incompatible with which other proposals, these incompatibilities can be voted on by participants.

* If some incompatibilities are controversial, the controversial proposals should be split up into smaller proposals with fewer incompatibilities between these newer proposals.

* Newer proposals with fewer incompatibilities should be ranked higher so that more of these simpler proposals will be among the accepted proposals.  Slowly more of these simpler proposals will replace the greedy proposals that are not widely popular.

* When negotiation progress slows down, participants should ask questions of other participants.  The questions should be sincere attempts to understand why their favorite proposals are not liked by other participants, and why other participants favor proposals the participant dislikes.

* If the negotiation process continues with a spirit of cooperation, the results are likely to converge on a list of proposals that are reasonably well-liked by all participants, or a very large percentage of participants.

* If only slightly more than half the participants would officially vote to adopt the accepted proposals, the negotiations should continue.

* The goal should be to arrive at a list of accepted proposals that are supported by 80 percent or more of the participants.

* Full consensus (100 percent support) would be ideal, but is unlikely.  At least a few participants are likely to withhold their official vote of support until the list of accepted proposals includes an unrelated proposal of personal interest.

* This negotiation tool is a platform for communication.  However, it cannot force participants to listen to fresh perspectives from other participants, which is the basis for communication.

* As a clarification, this negotiation tool is not an artificial intelligence (AI) tool.  Instead it looks for and finds areas of agreement based on the ranking numbers supplied by the participants.

* Here's a link to a graphic that summarizes what should, and should not, be specified in a proposal, and what kinds of questions are useful:

https://votefair.org/efficient_negotiation.png

* Here's a link to a graphic that attempts to summarize the nature of this negotiation tool:

https://votefair.org/legislative_negotiation.png



Version 2.00

Please regard this as a beta version for experimentation purposes, and not yet ready to handle very important negotiations.


RUNNING

g++ negotiation_tool.cpp -o negotiation_tool.exe

./negotiation_tool.ext < input_negotiation_tool.csv > output_negotiation_tool.json


SUPPORT AND DOCUMENTATION

A description of the calculations is below in the ALGORITHM section.

Detailed documentation is included as comments within the code.


KEYWORDS

VoteFair, negotiation, software, mediation, arbitration, liquid democracy, ranking, prioritize, priority, vote, voting, votes, voters


ALGORITHM

Here are the highlights about how the calculations are done.  This description assumes you have already read the DESCRIPTION section above.

* The ranking numbers just provide a way to identify the sequence in which each participant prefers the proposals.  Specifically, a ranking number supplied by one participant is never compared to a ranking number supplied by a different participant.

* Resolving a deep tie is the only time when the distinction between positive numbers and negative numbers can become relevant.

* A participant's ranking numbers can be regarded as that participant's ballot.

* Each participant's ballot can have full influence, or reduced influence, depending on the calculation step.  At the beginning of the calculations, and at some calculation steps, every ballot has the same full ballot weight.

* A participant's ballot weight can be reduced if that ballot has had more influence choosing which proposals are accepted.  A participant's ballot weight can have more influence if that participant's ranking numbers have had less influence choosing which proposals are accepted.

* The supplied ranking numbers are analyzed using pairwise counting.  The word "pairwise" refers to two proposals being considered as a pair of proposals.

* Pariwise counting means a proposal is either ranked higher, or ranked lower, or ranked the same as, another proposal on the same ballot.  For example a proposal assigned to ranking number 32 is counted as one proposal ranked higher than another proposal assigned to the ranking number 20.  As previously explained, the "distance" between ranking numbers is completely ignored!

* A pairwise losing proposal is a proposal that is ranked by more than half the participants as lower than every other proposal still being considered.  At every possible point, pairwise losing proposals are eliminated from consideration, either temporarily or permanently.

* To understand the pairwise losing concept using a sports metaphor, a soccer team that loses every game against every other team still in the playoffs is a pariwise losing team, and deserves to be eliminated as a possible championship team.

* A pairwise support count is the number of proposals still being considered that are ranked lower than the proposal being measured for support.  A pairwise support count can span across all ballots or be specific to a single ballot.  The pairwise support count is used to help determine which proposal is least popular among the proposals being considered.

* A pairwise opposition count is the number of proposals that are ranked higher than the proposal being measured for opposition.  As with pairwise support counts, this count can span across all ballots or be specific to a single ballot.  The pairwise opposition count is used to help determine which proposal is least popular among the proposals being considered.

* A pairwise support-minus-opposition count is the pairwise support count minus the pairwise opposition count.  This count can span across all ballots or be specific to a single ballot.

* Based on considering a specific group of proposals, a pairwise support-minus-opposition count for a specific participant is used to measure how much satisfaction that participant would have if that group of proposals were accepted.

* Many possible "opposition coalitions" are considered to identify a group of participants who are not well-represented by the accepted proposals.  All, or most of, the remaining participants are regarded as a possible "dominant coalition."

* The size of an opposition coalition is a fraction such as half the participants, one third of the participants, one fourth of the participants, and so on down to about one seventh of the participants.

* The only information used to identify possible coalitions are the rankings on the ballots.  If any participants might suspect any bias based on any text (non-number) information, comments should be omitted from the input data.  (Any line with a zero as the first number is ignored as if it's a comment.)

* A satisfaction count measures the degree of satisfaction a participant has for the accepted proposals, including satisfaction with which proposals have been rejected as incompatible, and satisfaction with which proposals are not yet accepted because they are less popular.  This calculation can be regarded as measuring the degree to which each participant belongs to the opposition coalition or the dominant coalition.

* The satisfaction counts are used to adjust the weight (influence amount) of each participant's ballot.  Specifically the ballots are given weights that range from full weight to zero weight.  The participant with the largest satisfaction count is given a zero ballot weight, and the participant with the smallest satisfaction count is given the full ballot weight.  Typically the other participants will have ballot weights between these extremes.  Basically this calculation step inverts (turns upside-down) the satisfaction counts to become the ballot weights.  Using these adjusted ballot weights, the most popular proposal is identified.  This is the proposal that is most popular among the opposition coalition participants.

* A disparity gap is calculated to determine whether to accept a proposal that is most popular among opposition coalition participants.  This disparity gap equals the average satisfaction count of the dominant coalition participants minus the average satisfaction count of the opposition coalition participants.  If the disparity gap is sufficiently large, the proposal is accepted.  If the disparity gap is small, the proposal is not accepted.

* When the number of accepted proposals reaches the specified limit, the calculations end.  If the specified limit equals the number of proposals, the calculations will continue until no more proposals can be accepted.

* Another limit that can be specified is the percentage of participants who dislike a proposal.  If there are any proposals that reach this percentage of "dislike" rankings, the proposal is rejected at the beginning of the calculations, before any proposal is considered for acceptance.  Neutral rankings, at rank zero, are not counted as dislikes for this purpose.

* Some participants might try to rank only one proposal with a positive number and rank all other proposals with negative numbers, in hopes of pushing that proposal to get accepted.  This tactic does not work because pairwise counting does not recognize the special zero ranking.  And because the distinction between positive numbers and negative numbers is ignored beyond the fact that negative numbers are smaller than positive numbers.

* If a participant tries to get counted in one of the many considered opposition coalitions by giving an insincere high ranking to a proposal they dislike, they risk helping get that proposal accepted.

* The way for participants to get what they want is to consider the perspective of other participants and supply proposals that clearly specify reasonable ways to achieve what they want.  Greedy proposals are unlikely to be accepted, and are likely to be incompatible with many other proposals.

* For additonal details about the calculation steps, especially for a specific negotiation case, look at the "loginfo" messages within the output JSON file.  These messages can be turned off by including an appropriate data line in the input file.

* Here's a link to a graphic that shows how a ballot is counted to yield a single-ballot pairwise support count and a single-ballot pairwise opposition count:

https://votefair.org/pairwise_support_opposition.png



REDIRECT LINKS

VoteFair.org/negotiate links to:

    https://github.com/cpsolver/VoteFair-Negotiation-Tool/blob/master/README


VoteFair.org/negotiation_code links to:

    https://github.com/cpsolver/VoteFair-Negotiation-Tool/blob/master/negotiation_tool.cpp



COPYRIGHT AND LICENCE

Copyright (c) 2003-2025 Richard Fobes at www.VoteFair.org, all rights reserved.

You can redistribute and/or modify this library module under the MIT license,
a copy of which is included in the LICENSE file.

Conversions of this code into other languages are also
covered by the above license terms.
